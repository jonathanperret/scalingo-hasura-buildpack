#!/bin/bash

set -o errexit    # always exit on error
set -o pipefail   # don t ignore exit codes when piping output

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

# Note that the default profile already adds $HOME/bin to the PATH, it's just
# not setup while building for some reason.
PATH=$HOME/bin:$PATH

if [ ! -f $ENV_DIR/HASURA_VERSION ]; then
  echo "You must set the HASURA_VERSION variable to a version e.g. v2.1.1"
  exit 1
fi

HASURA_VERSION=$(cat $ENV_DIR/HASURA_VERSION)

HASURA_IMAGE=hasura/graphql-engine:${HASURA_VERSION}

echo "--> Installing udocker"
curl -Ss -L https://github.com/indigo-dc/udocker/releases/download/v1.3.1/udocker-1.3.1.tar.gz | tar "-C$HOME" -zx

function udocker() {
  python3 $HOME/udocker/udocker "$@"
}

echo "--> Pulling graphql-engine image $HASURA_IMAGE"
udocker pull $HASURA_IMAGE

echo "--> Creating graphql-engine container"
udocker create --name=graphql-engine $HASURA_IMAGE

echo "--> Copying shared libraries out of container"
mkdir -p $BUILD_DIR/.hasura/lib
cp -R .udocker/containers/graphql-engine/ROOT/usr/lib/x86_64-linux-gnu $BUILD_DIR/.hasura/lib

echo "--> Copying graphql-engine binary out of container"
mkdir -p $BUILD_DIR/.hasura/bin
cp -R .udocker/containers/graphql-engine/ROOT/bin/graphql-engine $BUILD_DIR/.hasura/bin

echo "--> Removing udocker files"
rm -rf $HOME/.udocker $HOME/udocker

echo "--> Setting up environment in .profile"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/001_hasura.sh
export PATH="\$HOME/.hasura/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.hasura/lib/x86_64-linux-gnu\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH"
EOF

echo "--> Creating start-graphql-engine script"
cat > $BUILD_DIR/.hasura/bin/start-graphql-engine << 'EOF'
#!/bin/bash

set -e

echo '{ "msg": "Applying connection pool settings..." }'

ruby -ryaml -e '
  exit unless ENV["HASURA_CONNECTION_POOL_SETTINGS"]
  d = YAML.load_file(ARGV[0])
  d.first["configuration"]["connection_info"]["pool_settings"].merge!(YAML.load(ENV["HASURA_CONNECTION_POOL_SETTINGS"]))
  File.write(ARGV[0], d.to_yaml)
' -- metadata/databases/databases.yaml

exec 2>&1 graphql-engine serve --server-port=$PORT
EOF
chmod +x $BUILD_DIR/.hasura/bin/start-graphql-engine

echo "--> Installing Hasura CLI"
(
  # The CLI install scripts launches "hasura version --skip-update-check" to confirm
  # installation, but that tries to connect to a graphql-engine if a config.yaml
  # file is found in the current directory, so move away
  cd /tmp
  curl -Ss -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh |
    VERSION=$HASURA_VERSION PATH="$BUILD_DIR/.hasura/bin:$PATH" INSTALL_PATH="$BUILD_DIR/.hasura/bin" bash
)
