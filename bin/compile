#!/bin/bash

set -o errexit    # always exit on error
set -o pipefail   # don t ignore exit codes when piping output

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

# Note that the default profile already adds $HOME/bin to the PATH, it's just
# not setup while building for some reason.
PATH=$HOME/bin:$PATH

if [ ! -f $ENV_DIR/HASURA_VERSION ]; then
  echo "You must set the HASURA_VERSION variable to a version e.g. v2.1.1"
  exit 1
fi

HASURA_VERSION=$(cat $ENV_DIR/HASURA_VERSION)

HASURA_IMAGE=hasura/graphql-engine:${HASURA_VERSION}.cli-migrations-v3

echo "--> Installing udocker"
curl -Ss -L https://github.com/indigo-dc/udocker/releases/download/v1.3.1/udocker-1.3.1.tar.gz | tar "-C$HOME" -zx

# Create a wrapper script, notably because there is no plain `python` in the path
# and udocker's shebang line refers to it.
mkdir -p bin
cat > bin/udocker << 'EOF'
#!/bin/bash
exec python3 $HOME/udocker/udocker "$@"
EOF
chmod +x bin/udocker

echo "--> Pulling graphql-engine image $HASURA_IMAGE"
udocker pull $HASURA_IMAGE

echo "--> Creating graphql-engine container"
udocker create --name=graphql-engine $HASURA_IMAGE

echo "--> Removing graphql-engine image (an udocker container copies all files from the image)"
udocker rmi $HASURA_IMAGE

echo "--> Copying metadata and migrations into the container"
cp -R metadata .udocker/containers/graphql-engine/ROOT/hasura-metadata
cp -R migrations .udocker/containers/graphql-engine/ROOT/hasura-migrations

echo "--> Creating graphql-engine wrapper script"
cat > $HOME/bin/graphql-engine << 'EOF'
#!/bin/bash
exec $HOME/bin/udocker run --nobanner --hostenv graphql-engine graphql-engine "$@"
EOF
chmod +x $HOME/bin/graphql-engine

echo "--> Creating start-graphql-engine script"
cat > $HOME/bin/start-graphql-engine << 'EOF'
#!/bin/bash

set -e

echo '{ "msg": "Applying connection pool settings..." }'

ruby -ryaml -e '
  exit unless ENV["HASURA_CONNECTION_POOL_SETTINGS"]
  d = YAML.load_file(ARGV[0])
  d.first["configuration"]["connection_info"]["pool_settings"].merge!(YAML.load(ENV["HASURA_CONNECTION_POOL_SETTINGS"]))
  File.write(ARGV[0], d.to_yaml)
' -- .udocker/containers/graphql-engine/ROOT/hasura-metadata/databases/databases.yaml

exec 2>&1 $HOME/bin/graphql-engine serve --server-port=$PORT
EOF
chmod +x $HOME/bin/start-graphql-engine

echo "--> Installing Hasura CLI"
(
  # The CLI install scripts launches "hasura version --skip-update-check" to confirm
  # installation, but that tries to connect to a graphql-engine if a config.yaml
  # file is found in the current directory, so move away
  cd /tmp
  curl -Ss -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh |
    VERSION=$HASURA_VERSION PATH="$HOME/bin:$PATH" INSTALL_PATH="$HOME/bin" bash
)
